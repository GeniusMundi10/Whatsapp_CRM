// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   Boolean?  @default(true)
  verificationCode String? @default("")
  hashedPassword  String?
  image           String? @default("")
  about           String? @default("Hey there! I am using WhatsApp Clone")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastSeen        DateTime? @default(now())

  conversations Conversation[]

  seenMessages Message[] @relation("Seen")

  accounts Account[]
  messages Message[]
  
  // CRM Relations
  contactTags ContactTag[] // Tags created by this user
  customerInfo CustomerInfo[] // Customer info created by this user
  followUps FollowUp[] // Follow-ups created by this user
  messageTemplates MessageTemplate[] // Message templates created by this user
  contactNotes ContactNote[] // Notes created by this user
}

model Account {
  id String @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  refresh_token_expires_in Int?
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id String @id @default(cuid())
  createdAt       DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?
  logo String?

  messages Message[]

  users User[]
  
  // CRM Relations
  customerInfo CustomerInfo? // One conversation can be associated with one customer
  followUps FollowUp[] // Follow-ups related to this conversation
  contactNotes ContactNote[] // Notes related to this conversation
}

model Message {
  id String @id @default(cuid())
  body String?
  image String?
  audio String?
  type String?
  createdAt DateTime @default(now())

  seen User[] @relation("Seen")

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  // CRM Relations
  fromTemplate Boolean @default(false)
  templateId String?
  messageTemplate MessageTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
}

// CRM Models

model ContactTag {
  id String @id @default(cuid())
  name String
  color String
  createdAt DateTime @default(now())
  
  creatorId String
  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  customerInfos CustomerInfo[] // Many-to-many relation with CustomerInfo
}

model CustomerInfo {
  id String @id @default(cuid())
  company String?
  position String?
  notes String?
  address String?
  website String?
  priority String? // "High", "Medium", "Low"
  status String? // "Lead", "Customer", "Prospect", etc.
  source String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  conversationId String @unique
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  creatorId String
  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  // Many-to-many relation with tags
  tags ContactTag[]
}

model ContactNote {
  id String @id @default(cuid())
  content String
  createdAt DateTime @default(now())
  
  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  creatorId String
  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model FollowUp {
  id String @id @default(cuid())
  title String
  description String?
  dueDate DateTime
  priority String // "High", "Medium", "Low"
  status String // "Pending", "Completed", "Overdue"
  isRecurring Boolean @default(false)
  recurrencePattern String? // "Daily", "Weekly", "Monthly"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  creatorId String
  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model MessageTemplate {
  id String @id @default(cuid())
  name String
  content String
  category String? // For organizing templates
  variables String[] // Variables like {{name}}, {{company}}
  usageCount Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  creatorId String
  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  messages Message[] // Messages created from this template
}
